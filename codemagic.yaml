workflows:
  ci:
    name: CI
    max_build_duration: 45
    environment:
      flutter: stable
      xcode: latest
      vars:
        BUNDLE_ID: com.kamurandev.wedlist.wedlist # Projedeki iOS Bundle ID
      groups:
        - app_store_connect # Codemagic UI'da APP_STORE_CONNECT_* değişkenlerini tanımlayın
    scripts:
      - name: Install dependencies
        script: flutter pub get
      - name: Format check
        script: dart format --set-exit-if-changed .
      - name: Analyze
        script: flutter analyze
      - name: Run tests
        script: flutter test --test-randomize-ordering-seed=random
      - name: Build Android debug APK
        script: flutter build apk --debug
    artifacts:
      - build/app/outputs/flutter-apk/*.apk

  android_release:
    name: Android Release (AAB)
    max_build_duration: 60
    environment:
      flutter: stable
      groups:
        - keystore_credentials # Codemagic UI'da oluşturacağınız env grubu (aşağıdaki env'leri içermeli)
    scripts:
      - name: Install dependencies
        script: flutter pub get
      - name: Format check
        script: dart format --set-exit-if-changed .
      - name: Analyze
        script: flutter analyze
      - name: Run tests
        script: flutter test --test-randomize-ordering-seed=random
      - name: Prepare Android keystore
        script: |
          # Aşağıdaki env değişkenlerini Codemagic'de tanımlayın:
          # ANDROID_KEYSTORE (base64), ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_PASSWORD
          echo "$ANDROID_KEYSTORE" | base64 --decode > android/app/keystore.jks
          cat > android/key.properties <<EOF
          storePassword=$ANDROID_KEYSTORE_PASSWORD
          keyPassword=$ANDROID_KEY_PASSWORD
          keyAlias=$ANDROID_KEY_ALIAS
          storeFile=app/keystore.jks
          EOF
      - name: Build Android App Bundle (release)
        script: flutter build appbundle --release
    artifacts:
      - build/app/outputs/bundle/release/*.aab

  # iOS için imzalama gereklidir. Codemagic Automatic Code Signing ile
  # kolayca kurulabilir. Hazır olduğunuzda ayrı bir iOS workflow'u ekleyebiliriz.
  ios_release:
    name: iOS Release (App Store, automatic signing)
    max_build_duration: 60
    integrations:
      app_store_connect: codemagic-ci
    environment:
      flutter: stable
      xcode: latest
      vars:
        BUNDLE_ID: com.kamurandev.wedlist.wedlist
      groups:
        - app_store_connect
    scripts:
      - name: Install dependencies
        script: flutter pub get
      - name: Format check
        script: dart format --set-exit-if-changed .
      - name: Analyze
        script: flutter analyze
      - name: Run tests
        script: flutter test --test-randomize-ordering-seed=random
      - name: Fetch iOS signing files (app store)
        script: |
          # GEREKEN: CERTIFICATE_PRIVATE_KEY (aynı private key). Doğru flag: --certificate-key
          if [ -z "$CERTIFICATE_PRIVATE_KEY" ]; then
            echo "[ERROR] CERTIFICATE_PRIVATE_KEY env yok. Codemagic > Environment variables altina ekleyin." >&2
            exit 1
          fi
          echo "CERTIFICATE_PRIVATE_KEY length: ${#CERTIFICATE_PRIVATE_KEY}"
          echo "$CERTIFICATE_PRIVATE_KEY" > cert_key.pem
          app-store-connect fetch-signing-files \
            "$BUNDLE_ID" \
            --type IOS_APP_STORE \
            --create \
            --certificate-key "$(cat cert_key.pem)"
      - name: Import certificate manually
        script: |
          CERT_DIR=~/Library/MobileDevice/Certificates
          P12=$(ls $CERT_DIR/*.p12 2>/dev/null | head -n1 || true)
          if [ -z "$P12" ]; then echo "[ERROR] Import edilecek p12 yok" >&2; exit 1; fi
          # p12 test decode
          if ! openssl pkcs12 -in "$P12" -nokeys -passin pass: -legacy >/dev/null 2>&1; then
            echo "[WARN] p12 decode başarısız, .cer + key ile yeniden oluşturma denenecek";
            CER=$(ls $CERT_DIR/*.cer 2>/dev/null | head -n1 || true)
            if [ -n "$CER" ]; then
              openssl x509 -in "$CER" -inform DER -out dist_cert.pem -outform PEM || openssl x509 -in "$CER" -out dist_cert.pem || true
              openssl pkcs12 -export -inkey cert_key.pem -in dist_cert.pem -out rebuilt_tmp.p12 -passout pass: || { echo "[ERROR] rebuild pkcs12 başarısız" >&2; exit 1; }
              mv rebuilt_tmp.p12 $CERT_DIR/rebuilt_distribution.p12
              P12=$CERT_DIR/rebuilt_distribution.p12
              echo "[INFO] Rebuilt p12: $P12"
            else
              echo "[ERROR] CER bulunamadı rebuild yapılamıyor" >&2; exit 1
            fi
          fi
          security import "$P12" -k ~/Library/Keychains/login.keychain-db -P "" -A -T /usr/bin/codesign -T /usr/bin/security || {
            echo "[ERROR] security import başarısız" >&2; exit 1; }
          echo "[OK] Sertifika keychain'e import edildi."
      - name: Use provisioning profiles
        script: xcode-project use-profiles
      - name: Build iOS IPA (release)
        script: flutter build ipa --release
    artifacts:
      - build/ios/ipa/*.ipa
    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        submit_to_app_store: false
